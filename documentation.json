{
    "pipes": [],
    "interfaces": [
        {
            "name": "AuthPartialState",
            "id": "interface-AuthPartialState-a0c36c204626c82b1d1b79972e6d9333671177945a3bce3146ec98e0f07d5bb7ef4e36d89270f8b47a980049f84527e51b67a6e966e64ecea2b76ca17b32dc43",
            "file": "libs/auth/src/lib/+state/auth.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on, Action } from '@ngrx/store'\n\nimport { NgbsUser } from '../models/user'\nimport * as AuthActions from './auth.actions'\n\nexport const AUTH_FEATURE_KEY = 'auth'\n\nexport interface State {\n  readonly loaded: boolean // has Auth been loaded\n  readonly errors: ReadonlyArray<string> // last known errors (if any)\n  readonly user?: NgbsUser | null // currently active user, if logged in\n}\n\nexport interface AuthPartialState {\n  readonly [AUTH_FEATURE_KEY]: State\n}\n\nexport const initialState: State = {\n  // set initial required properties\n  loaded: false,\n  errors: [],\n}\n\nconst authReducer = createReducer(\n  initialState,\n  on(AuthActions.init, (state, { user }) => ({\n    ...state,\n    loaded: true,\n    error: null,\n    user,\n  })),\n  on(AuthActions.loadAuthFailure, (state, { error }) => ({\n    ...state,\n    errors: [...state.errors, error],\n  })),\n  on(AuthActions.logInSuccess, (state, { user }) => ({ ...state, user })),\n  on(AuthActions.logInFailure, (state, { error }) => ({\n    ...state,\n    errors: [error, ...state.errors],\n  })),\n  on(AuthActions.signUpSuccess, (state, { user }) => ({ ...state, user })),\n  on(AuthActions.signUpFailure, (state, { error }) => ({\n    ...state,\n    errors: [error, ...state.errors],\n  })),\n  on(AuthActions.logOut, (state) => ({ ...state, user: undefined }))\n)\n\nexport function reducer(state: State | undefined, action: Action) {\n  return authReducer(state, action)\n}\n",
            "properties": [
                {
                    "name": "AUTH_FEATURE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LogInFormValues",
            "id": "interface-LogInFormValues-e938efac509f30970a9f8d16ffe997b9706cfa365485f1a03aad180d4bbfb4aacac8bb667943e2c5f6be8dd2515baba1a3518c820bd3e856c1327c203192bad9",
            "file": "libs/auth/src/lib/components/log-in-form/log-in.form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl, FormGroup, Validators } from '@angular/forms';\n\nexport class LogInForm extends FormGroup {\n  constructor() {\n    super({\n      emailAddress: new FormControl('', Validators.required),\n      password: new FormControl('', Validators.required),\n    });\n  }\n}\n\nexport interface LogInFormValues {\n  emailAddress: string;\n  password: string;\n}\n",
            "properties": [
                {
                    "name": "emailAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NgbsAuthCredentials",
            "id": "interface-NgbsAuthCredentials-ece5522a91fcf75f5573ac71a3f9fbdc7d9b431358b5abbea88c27fcc91cc5e3dbf651d18a4717267c8be4937215de14fa98f0afbd36380947057ef996c077e0",
            "file": "libs/auth/src/lib/+state/auth.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { User } from '@angular/fire/auth'\n\nexport type NgbsPassword = string\nexport type NgbsEmailAddress = string\n\nexport interface NgbsAuthCredentials {\n  emailAddress: NgbsEmailAddress\n  password: NgbsPassword\n}\n\nexport type NgbsUser = User\n\nexport type NgbsError = any\n",
            "properties": [
                {
                    "name": "emailAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgbsEmailAddress",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgbsPassword",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NgbsAvatarComponentProps",
            "id": "interface-NgbsAvatarComponentProps-252f67c222a54f1315e77ae3cb5fed5bbc32c2f97deb51e414d30752d7618c92b85193984169a78045c2a346bd2d59e019b85c80dd18652e6d6873ff553c8b01",
            "file": "libs/auth/src/lib/components/avatar/avatar.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Output,\n} from '@angular/core'\nimport { ComponentActions } from '@ngbs/utils'\nimport { createAction, props } from '@ngrx/store'\nimport { merge, ReplaySubject } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { NgbsUser } from '../../+state/auth.models'\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'ngbs-auth-avatar',\n  templateUrl: './avatar.component.html',\n  styles: [`\n    input:checked + menu.d-none {\n    display: block !important;\n    }\n  `]\n})\nexport class NgbsAuthAvatarComponent {\n  private readonly props$ = new ReplaySubject<NgbsAvatarComponentProps>(1)\n  public readonly clickLogOut$ = new ReplaySubject<{ event: Event }>(1)\n  public readonly clickLogIn$ = new ReplaySubject<{ event: Event }>(1)\n  public readonly clickSettings$ = new ReplaySubject<{ event: Event }>(1)\n  public readonly clickSignUp$ = new ReplaySubject<{ event: Event }>(1)\n\n  @Input()\n  public set props(props: NgbsAvatarComponentProps | null) {\n    if (!props) return\n    this.props$.next(props)\n  }\n\n  @Output()\n  public readonly action$ = merge(\n    this.clickLogOut$.pipe(map(clickLogOut)),\n    this.clickLogIn$.pipe(map(clickLogIn)),\n    this.clickSignUp$.pipe(map(clickSignUp)),\n    this.clickSettings$.pipe(map(clickSettings))\n  )\n\n  public readonly user$ = this.props$.pipe(map((props) => props.user))\n\n  public readonly imgSrc$ = this.user$.pipe(\n    map((user) => {\n      if (!user) return '/assets/logged-out.svg'\n      if (!user.photoURL) return '/assets/logged-in.svg'\n      return user.photoURL\n    })\n  )\n\n  public readonly imgAlt$ = this.user$.pipe(\n    map((user) => {\n      if (!user) return 'Log In'\n      if (!user.displayName) return user.email || 'Unknown User'\n      return user.displayName\n    })\n  )\n}\n\nexport interface NgbsAvatarComponentProps {\n  readonly user?: Pick<NgbsUser, 'photoURL' | 'displayName' | 'email'> | null\n}\n\nexport const clickLogOut = createAction(\n  `[NgbsAuthAvatarComponent] Log Out Clicked`,\n  props<{ event: Event }>()\n)\n\nexport const clickLogIn = createAction(\n  `[NgbsAuthAvatarComponent] Log In Clicked`,\n  props<{ event: Event }>()\n)\n\nexport const clickSignUp = createAction(\n  `[NgbsAuthAvatarComponent] Sign Up Clicked`,\n  props<{ event: Event }>()\n)\n\nexport const clickSettings = createAction(\n  `[NgbsAuthAvatarComponent] Settings Clicked`,\n  props<{ event: Event }>()\n)\n\nexport type NgbsAuthAvatarComponentAction =\n  ComponentActions<NgbsAuthAvatarComponent>\n",
            "properties": [
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pick<NgbsUser | \"photoURL\" | \"displayName\" | \"email\"> | null",
                    "optional": true,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SignUpFormValues",
            "id": "interface-SignUpFormValues-e8cb9fa0cbd76212c994cde975c8a7e5a50c695d1b0c72ffaa6e0e4a0cc1ea2544868ebdd8c3b19fe95ca14cbf14f763d1557d97d1865bb04fc78b1474dbdaf0",
            "file": "libs/auth/src/lib/components/sign-up-form/sign-up.form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  AbstractControl,\n  FormControl,\n  FormGroup,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\n\nexport class SignUpForm extends FormGroup {\n  constructor() {\n    super(\n      {\n        emailAddress: new FormControl('', Validators.required),\n        password: new FormControl('', Validators.required),\n        passwordConfirm: new FormControl('', Validators.required),\n      },\n      {\n        validators: passwordsMatchValidator,\n      }\n    );\n  }\n}\n\nexport interface SignUpFormValues {\n  emailAddress: string;\n  password: string;\n  passwordConfirm: string;\n}\n\nconst passwordsMatchValidator: ValidatorFn = (control: AbstractControl) => {\n  const password = control.get('password');\n  const passwordConfirm = control.get('passwordConfirm');\n  const controlsTouched = password?.touched && passwordConfirm?.touched;\n  if (!controlsTouched || password?.value === passwordConfirm?.value) {\n    return null;\n  } else {\n    return {\n      passwordMismatch: true,\n    };\n  }\n};\n",
            "properties": [
                {
                    "name": "emailAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "passwordConfirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-a0c36c204626c82b1d1b79972e6d9333671177945a3bce3146ec98e0f07d5bb7ef4e36d89270f8b47a980049f84527e51b67a6e966e64ecea2b76ca17b32dc43",
            "file": "libs/auth/src/lib/+state/auth.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on, Action } from '@ngrx/store'\n\nimport { NgbsUser } from '../models/user'\nimport * as AuthActions from './auth.actions'\n\nexport const AUTH_FEATURE_KEY = 'auth'\n\nexport interface State {\n  readonly loaded: boolean // has Auth been loaded\n  readonly errors: ReadonlyArray<string> // last known errors (if any)\n  readonly user?: NgbsUser | null // currently active user, if logged in\n}\n\nexport interface AuthPartialState {\n  readonly [AUTH_FEATURE_KEY]: State\n}\n\nexport const initialState: State = {\n  // set initial required properties\n  loaded: false,\n  errors: [],\n}\n\nconst authReducer = createReducer(\n  initialState,\n  on(AuthActions.init, (state, { user }) => ({\n    ...state,\n    loaded: true,\n    error: null,\n    user,\n  })),\n  on(AuthActions.loadAuthFailure, (state, { error }) => ({\n    ...state,\n    errors: [...state.errors, error],\n  })),\n  on(AuthActions.logInSuccess, (state, { user }) => ({ ...state, user })),\n  on(AuthActions.logInFailure, (state, { error }) => ({\n    ...state,\n    errors: [error, ...state.errors],\n  })),\n  on(AuthActions.signUpSuccess, (state, { user }) => ({ ...state, user })),\n  on(AuthActions.signUpFailure, (state, { error }) => ({\n    ...state,\n    errors: [error, ...state.errors],\n  })),\n  on(AuthActions.logOut, (state) => ({ ...state, user: undefined }))\n)\n\nexport function reducer(state: State | undefined, action: Action) {\n  return authReducer(state, action)\n}\n",
            "properties": [
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReadonlyArray<string>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "loaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgbsUser | null",
                    "optional": true,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-fc60272a95c75f7a9a7181c91a58e849b1d99ca3f44ac586a4e0f45f26d54dd721ff72ea850fa2618cbe6b536fda5585fe557a921bf09058a5cb6db36e30a19f",
            "file": "libs/auth/src/lib/+state/auth.effects.ts",
            "properties": [
                {
                    "name": "init$",
                    "defaultValue": "createEffect(() =>\n    this.authService.user$.pipe(\n      take(1),\n      map((user) => AuthActions.init({ user }))\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "logIn$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(AuthActions.logInSubmit),\n      switchMap((action) => this.authService.logIn(action.credentials)),\n      map((user) => {\n        return user?.email\n          ? AuthActions.logInSuccess({\n              user,\n            })\n          : AuthActions.logInFailure({\n              error: 'AuthEffects.logIn$: missing user or user.email',\n            })\n      }),\n      catchError((error) => {\n        console.error('AuthEffects.logIn$')\n        console.error(error)\n\n        return of(\n          AuthActions.logInFailure({\n            error,\n          })\n        )\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "logOutFromBackend",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(AuthActions.logOut),\n        switchMap(() => this.authService.logOut())\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 113,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "navigateOnLogInOrSignUpSuccess$",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(AuthActions.logInSuccess, AuthActions.signUpSuccess),\n        concatLatestFrom(() =>\n          this.store.select(getSelectors().selectRouteData)\n        ),\n        tap(([, routeData]) => {\n          const targetUrl = routeData?.targetUrl || '/auth/settings'\n          this.router.navigateByUrl(targetUrl).catch((reason) => {\n            /*\n             * TODO: Diagnose Error\n             *\n             * Angular is throwing an error when navigating away from a completed sign up or log in form\n             * this error is preventing navigation on sign up or log in success\n             * catching the error and calling navigate again navigates successfully\n             *\n             * ```typescript\n             * error TypeError: Cannot delete property '0' of [object Array]\n             * at Array.splice (<anonymous>)\n             * at removeListItem (forms.mjs:1835)/\n             * ```\n             *\n             *\n             */\n            console.error('error', reason)\n            this.router.navigateByUrl(targetUrl)\n          })\n        })\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "navigateOnLogOut",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(AuthActions.logOut),\n        concatLatestFrom(() =>\n          this.store.select(getSelectors().selectRouteData)\n        ),\n        tap(([, routeData]) => {\n          const targetUrl = routeData?.targetUrl || '/'\n          this.router\n            .navigateByUrl(targetUrl)\n            .catch(() => this.router.navigateByUrl(targetUrl))\n        })\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 122,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "signUp$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(AuthActions.signUpSubmit),\n      switchMap((action) => this.authService.signUp(action.credentials)),\n      map((user) =>\n        user?.email\n          ? AuthActions.signUpSuccess({\n              user,\n            })\n          : AuthActions.signUpFailure({\n              error: 'AuthEffects.signUp$ : missing user or user.email',\n            })\n      ),\n      catchError((error) => {\n        console.error('AuthEffects.signUp$')\n        console.error(error)\n\n        return of(\n          AuthActions.signUpFailure({\n            error,\n          })\n        )\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123,
                        144
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { Router } from '@angular/router'\nimport { createEffect, Actions, ofType, concatLatestFrom } from '@ngrx/effects'\nimport { getSelectors } from '@ngrx/router-store'\nimport { Store } from '@ngrx/store'\nimport { of } from 'rxjs'\nimport { catchError, map, switchMap, take, tap } from 'rxjs/operators'\n\nimport { AuthService } from '../auth.service'\nimport * as AuthActions from './auth.actions'\n\n@Injectable()\nexport class AuthEffects {\n  constructor(\n    private readonly actions$: Actions,\n    private readonly authService: AuthService,\n    private readonly store: Store,\n    private readonly router: Router\n  ) {}\n\n  public readonly init$ = createEffect(() =>\n    this.authService.user$.pipe(\n      take(1),\n      map((user) => AuthActions.init({ user }))\n    )\n  )\n\n  public readonly logIn$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AuthActions.logInSubmit),\n      switchMap((action) => this.authService.logIn(action.credentials)),\n      map((user) => {\n        return user?.email\n          ? AuthActions.logInSuccess({\n              user,\n            })\n          : AuthActions.logInFailure({\n              error: 'AuthEffects.logIn$: missing user or user.email',\n            })\n      }),\n      catchError((error) => {\n        console.error('AuthEffects.logIn$')\n        console.error(error)\n\n        return of(\n          AuthActions.logInFailure({\n            error,\n          })\n        )\n      })\n    )\n  )\n\n  public readonly signUp$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AuthActions.signUpSubmit),\n      switchMap((action) => this.authService.signUp(action.credentials)),\n      map((user) =>\n        user?.email\n          ? AuthActions.signUpSuccess({\n              user,\n            })\n          : AuthActions.signUpFailure({\n              error: 'AuthEffects.signUp$ : missing user or user.email',\n            })\n      ),\n      catchError((error) => {\n        console.error('AuthEffects.signUp$')\n        console.error(error)\n\n        return of(\n          AuthActions.signUpFailure({\n            error,\n          })\n        )\n      })\n    )\n  )\n\n  public readonly navigateOnLogInOrSignUpSuccess$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(AuthActions.logInSuccess, AuthActions.signUpSuccess),\n        concatLatestFrom(() =>\n          this.store.select(getSelectors().selectRouteData)\n        ),\n        tap(([, routeData]) => {\n          const targetUrl = routeData?.targetUrl || '/auth/settings'\n          this.router.navigateByUrl(targetUrl).catch((reason) => {\n            /*\n             * TODO: Diagnose Error\n             *\n             * Angular is throwing an error when navigating away from a completed sign up or log in form\n             * this error is preventing navigation on sign up or log in success\n             * catching the error and calling navigate again navigates successfully\n             *\n             * ```typescript\n             * error TypeError: Cannot delete property '0' of [object Array]\n             * at Array.splice (<anonymous>)\n             * at removeListItem (forms.mjs:1835)/\n             * ```\n             *\n             *\n             */\n            console.error('error', reason)\n            this.router.navigateByUrl(targetUrl)\n          })\n        })\n      ),\n    { dispatch: false }\n  )\n\n  public readonly logOutFromBackend = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(AuthActions.logOut),\n        switchMap(() => this.authService.logOut())\n      ),\n    { dispatch: false }\n  )\n\n  public readonly navigateOnLogOut = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(AuthActions.logOut),\n        concatLatestFrom(() =>\n          this.store.select(getSelectors().selectRouteData)\n        ),\n        tap(([, routeData]) => {\n          const targetUrl = routeData?.targetUrl || '/'\n          this.router\n            .navigateByUrl(targetUrl)\n            .catch(() => this.router.navigateByUrl(targetUrl))\n        })\n      ),\n    { dispatch: false }\n  )\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-3b67f8eed8c06eab13454ae5caa8d5ed9694b30e0ce7b665ad19afb4c03fe2d975ebbb081f5167a2804aacc8f73db51ba7258775a56497c2d3b773336a3ab65c",
            "file": "libs/auth/src/lib/auth.service.ts",
            "properties": [
                {
                    "name": "user$",
                    "defaultValue": "new ReplaySubject<NgbsUser | null>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "logIn",
                    "args": [
                        {
                            "type": "NgbsAuthCredentials",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "NgbsAuthCredentials",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "type": "NgbsAuthCredentials",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "NgbsAuthCredentials",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { from, map, ReplaySubject } from 'rxjs'\nimport { NgbsAuthCredentials } from './+state/auth.models'\nimport {\n  Auth,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signOut,\n} from '@angular/fire/auth'\nimport { getUserFromResponse, getUserProperties, NgbsUser } from './models/user'\n\n@Injectable()\nexport class AuthService {\n  constructor(private readonly angularFireAuth: Auth) {\n    this.angularFireAuth.onAuthStateChanged({\n      next: (user) => this.user$.next(user ? getUserProperties(user) : null),\n      error: (error) => this.user$.error(error),\n      complete: () => this.user$.complete(),\n    })\n  }\n\n  public readonly user$ = new ReplaySubject<NgbsUser | null>(1)\n\n  public logIn({ emailAddress, password }: NgbsAuthCredentials) {\n    return from(\n      signInWithEmailAndPassword(this.angularFireAuth, emailAddress, password)\n    ).pipe(map(getUserFromResponse))\n  }\n\n  public signUp({ emailAddress, password }: NgbsAuthCredentials) {\n    return from(\n      createUserWithEmailAndPassword(\n        this.angularFireAuth,\n        emailAddress,\n        password\n      )\n    ).pipe(map(getUserFromResponse))\n  }\n\n  public logOut() {\n    return from(signOut(this.angularFireAuth))\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "angularFireAuth",
                        "type": "Auth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "angularFireAuth",
                        "type": "Auth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NgbsAuthFacade",
            "id": "injectable-NgbsAuthFacade-317d1c9cb6af572c13e6a5d1815d91da77fb367b84fae7c0a5213783b76149e401f6c9914abb7b4a01786ff5577cacd7124156e3db955885ab240f2f9a6e0246",
            "file": "libs/auth/src/lib/+state/auth.facade.ts",
            "properties": [
                {
                    "name": "isAuthLoaded$",
                    "defaultValue": "this.store.pipe(\n    select(AuthSelectors.isAuthLoaded)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "isLoggedIn$",
                    "defaultValue": "this.store.pipe(\n    select(AuthSelectors.isLoggedIn)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "user$",
                    "defaultValue": "this.store.pipe(select(AuthSelectors.getUser))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "logIn",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "NgbsAuthCredentials",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "NgbsAuthCredentials",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "NgbsAuthCredentials",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "NgbsAuthCredentials",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { select, Store } from '@ngrx/store'\n\nimport * as AuthActions from './auth.actions'\nimport { NgbsAuthCredentials } from './auth.models'\nimport * as AuthSelectors from './auth.selectors'\n\n/*\n * AuthFacade\n *\n * The facade is injected into view components, which consume data from and\n * make function calls to the facade.\n *\n * In this case the facade creates hooks into NgRx, but it may also consume\n * other services\n */\n@Injectable()\nexport class NgbsAuthFacade {\n  constructor(private readonly store: Store) {}\n\n  public readonly isAuthLoaded$ = this.store.pipe(\n    select(AuthSelectors.isAuthLoaded)\n  )\n\n  public readonly isLoggedIn$ = this.store.pipe(\n    select(AuthSelectors.isLoggedIn)\n  )\n\n  public readonly user$ = this.store.pipe(select(AuthSelectors.getUser))\n\n  public logOut() {\n    this.store.dispatch(AuthActions.logOut())\n  }\n\n  public signUp(credentials: NgbsAuthCredentials) {\n    this.store.dispatch(AuthActions.signUpSubmit({ credentials }))\n  }\n\n  public logIn(credentials: NgbsAuthCredentials) {\n    this.store.dispatch(AuthActions.logInSubmit({ credentials }))\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "NgbsAuthIsLoggedInGuard",
            "id": "injectable-NgbsAuthIsLoggedInGuard-0a169e5d2729475b35beb97c323ade888318f3fb43a1f1510a5c3f1c5f1ffad25fcdfc7fd86ae9ba98964c622dacffb077c07dc9ed63a189042a810668f6ede4",
            "file": "libs/auth/src/lib/guards/is-logged-in.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { CanActivate } from '@angular/router'\nimport { Store } from '@ngrx/store'\nimport { isLoggedIn } from '../+state/auth.selectors'\n\n@Injectable()\nexport class NgbsAuthIsLoggedInGuard implements CanActivate {\n  constructor(private readonly store: Store) {}\n  public canActivate() {\n    return this.store.select(isLoggedIn)\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "NgbsAuthIsLoggedOutGuard",
            "id": "injectable-NgbsAuthIsLoggedOutGuard-738d2d7df6816d987f8152284d2b50260061c6f815663c4b7450b79d0e1231c6edbd812c5bc3697b6efebee838991200a75b217cca7010875de9a45ca1607acc",
            "file": "libs/auth/src/lib/guards/is-logged-out.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { CanActivate } from '@angular/router'\nimport { Store } from '@ngrx/store'\nimport { isLoggedOut } from '../+state/auth.selectors'\n\n@Injectable()\nexport class NgbsAuthIsLoggedOutGuard implements CanActivate {\n  constructor(private readonly store: Store) {}\n  public canActivate() {\n    return this.store.select(isLoggedOut)\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "LogInForm",
            "id": "class-LogInForm-e938efac509f30970a9f8d16ffe997b9706cfa365485f1a03aad180d4bbfb4aacac8bb667943e2c5f6be8dd2515baba1a3518c820bd3e856c1327c203192bad9",
            "file": "libs/auth/src/lib/components/log-in-form/log-in.form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormControl, FormGroup, Validators } from '@angular/forms';\n\nexport class LogInForm extends FormGroup {\n  constructor() {\n    super({\n      emailAddress: new FormControl('', Validators.required),\n      password: new FormControl('', Validators.required),\n    });\n  }\n}\n\nexport interface LogInFormValues {\n  emailAddress: string;\n  password: string;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 3
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "FormGroup",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SignUpForm",
            "id": "class-SignUpForm-e8cb9fa0cbd76212c994cde975c8a7e5a50c695d1b0c72ffaa6e0e4a0cc1ea2544868ebdd8c3b19fe95ca14cbf14f763d1557d97d1865bb04fc78b1474dbdaf0",
            "file": "libs/auth/src/lib/components/sign-up-form/sign-up.form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  AbstractControl,\n  FormControl,\n  FormGroup,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\n\nexport class SignUpForm extends FormGroup {\n  constructor() {\n    super(\n      {\n        emailAddress: new FormControl('', Validators.required),\n        password: new FormControl('', Validators.required),\n        passwordConfirm: new FormControl('', Validators.required),\n      },\n      {\n        validators: passwordsMatchValidator,\n      }\n    );\n  }\n}\n\nexport interface SignUpFormValues {\n  emailAddress: string;\n  password: string;\n  passwordConfirm: string;\n}\n\nconst passwordsMatchValidator: ValidatorFn = (control: AbstractControl) => {\n  const password = control.get('password');\n  const passwordConfirm = control.get('passwordConfirm');\n  const controlsTouched = password?.touched && passwordConfirm?.touched;\n  if (!controlsTouched || password?.value === passwordConfirm?.value) {\n    return null;\n  } else {\n    return {\n      passwordMismatch: true,\n    };\n  }\n};\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "FormGroup",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AuthView",
            "id": "component-AuthView-185c0356ad7e3b21666d9a6de9398ffcb4b8afdf9525827935255ded915c760c5d849d39ab96e7c525666cc5f573411d170860c29658b147c998680beafc127f",
            "file": "libs/auth/src/lib/auth.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<router-outlet></router-outlet>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n  template: `\n  <router-outlet></router-outlet>\n  `,\n})\nexport class AuthView {\n  constructor(private readonly router: Router) {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "NgbsAuthAvatarComponent",
            "id": "component-NgbsAuthAvatarComponent-252f67c222a54f1315e77ae3cb5fed5bbc32c2f97deb51e414d30752d7618c92b85193984169a78045c2a346bd2d59e019b85c80dd18652e6d6873ff553c8b01",
            "file": "libs/auth/src/lib/components/avatar/avatar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngbs-auth-avatar",
            "styleUrls": [],
            "styles": [
                "\n    input:checked + menu.d-none {\n    display: block !important;\n    }\n  "
            ],
            "templateUrl": [
                "./avatar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "props",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "action$",
                    "defaultValue": "merge(\n    this.clickLogOut$.pipe(map(clickLogOut)),\n    this.clickLogIn$.pipe(map(clickLogIn)),\n    this.clickSignUp$.pipe(map(clickSignUp)),\n    this.clickSettings$.pipe(map(clickSettings))\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37
                }
            ],
            "propertiesClass": [
                {
                    "name": "clickLogIn$",
                    "defaultValue": "new ReplaySubject<{ event: Event }>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "clickLogOut$",
                    "defaultValue": "new ReplaySubject<{ event: Event }>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "clickSettings$",
                    "defaultValue": "new ReplaySubject<{ event: Event }>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "clickSignUp$",
                    "defaultValue": "new ReplaySubject<{ event: Event }>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "imgAlt$",
                    "defaultValue": "this.user$.pipe(\n    map((user) => {\n      if (!user) return 'Log In'\n      if (!user.displayName) return user.email || 'Unknown User'\n      return user.displayName\n    })\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "imgSrc$",
                    "defaultValue": "this.user$.pipe(\n    map((user) => {\n      if (!user) return '/assets/logged-out.svg'\n      if (!user.photoURL) return '/assets/logged-in.svg'\n      return user.photoURL\n    })\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "props$",
                    "defaultValue": "new ReplaySubject<NgbsAvatarComponentProps>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "user$",
                    "defaultValue": "this.props$.pipe(map((props) => props.user))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123,
                        144
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Output,\n} from '@angular/core'\nimport { ComponentActions } from '@ngbs/utils'\nimport { createAction, props } from '@ngrx/store'\nimport { merge, ReplaySubject } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { NgbsUser } from '../../+state/auth.models'\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'ngbs-auth-avatar',\n  templateUrl: './avatar.component.html',\n  styles: [`\n    input:checked + menu.d-none {\n    display: block !important;\n    }\n  `]\n})\nexport class NgbsAuthAvatarComponent {\n  private readonly props$ = new ReplaySubject<NgbsAvatarComponentProps>(1)\n  public readonly clickLogOut$ = new ReplaySubject<{ event: Event }>(1)\n  public readonly clickLogIn$ = new ReplaySubject<{ event: Event }>(1)\n  public readonly clickSettings$ = new ReplaySubject<{ event: Event }>(1)\n  public readonly clickSignUp$ = new ReplaySubject<{ event: Event }>(1)\n\n  @Input()\n  public set props(props: NgbsAvatarComponentProps | null) {\n    if (!props) return\n    this.props$.next(props)\n  }\n\n  @Output()\n  public readonly action$ = merge(\n    this.clickLogOut$.pipe(map(clickLogOut)),\n    this.clickLogIn$.pipe(map(clickLogIn)),\n    this.clickSignUp$.pipe(map(clickSignUp)),\n    this.clickSettings$.pipe(map(clickSettings))\n  )\n\n  public readonly user$ = this.props$.pipe(map((props) => props.user))\n\n  public readonly imgSrc$ = this.user$.pipe(\n    map((user) => {\n      if (!user) return '/assets/logged-out.svg'\n      if (!user.photoURL) return '/assets/logged-in.svg'\n      return user.photoURL\n    })\n  )\n\n  public readonly imgAlt$ = this.user$.pipe(\n    map((user) => {\n      if (!user) return 'Log In'\n      if (!user.displayName) return user.email || 'Unknown User'\n      return user.displayName\n    })\n  )\n}\n\nexport interface NgbsAvatarComponentProps {\n  readonly user?: Pick<NgbsUser, 'photoURL' | 'displayName' | 'email'> | null\n}\n\nexport const clickLogOut = createAction(\n  `[NgbsAuthAvatarComponent] Log Out Clicked`,\n  props<{ event: Event }>()\n)\n\nexport const clickLogIn = createAction(\n  `[NgbsAuthAvatarComponent] Log In Clicked`,\n  props<{ event: Event }>()\n)\n\nexport const clickSignUp = createAction(\n  `[NgbsAuthAvatarComponent] Sign Up Clicked`,\n  props<{ event: Event }>()\n)\n\nexport const clickSettings = createAction(\n  `[NgbsAuthAvatarComponent] Settings Clicked`,\n  props<{ event: Event }>()\n)\n\nexport type NgbsAuthAvatarComponentAction =\n  ComponentActions<NgbsAuthAvatarComponent>\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    input:checked + menu.d-none {\n    display: block !important;\n    }\n  \n",
            "accessors": {
                "props": {
                    "name": "props",
                    "setSignature": {
                        "name": "props",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "props",
                                "type": "NgbsAvatarComponentProps | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "jsdoctags": [
                            {
                                "name": "props",
                                "type": "NgbsAvatarComponentProps | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"position-relative\" style=\"width: 5rem; height: 5rem\">\n  <label style=\"list-style: none\" for=\"avatar-menu\">\n    <img\n      style=\"width: 5rem; height: 5rem\"\n      class=\"rounded-circle\"\n      aria-label=\"avatar-user-menu\"\n      data-test=\"avatar-img\"\n      [src]=\"imgSrc$ | async\"\n      [alt]=\"imgAlt$ | async\"\n    />\n  </label>\n  <input\n    type=\"checkbox\"\n    id=\"avatar-menu\"\n    class=\"d-none\"\n    ngbsUncheckOnDocumentClick\n  />\n  <menu class=\"d-none position-absolute bg-light\" style=\"width: 10rem\">\n    <ng-template *ngIf=\"user$ | async as user; else loggedOutMenu\">\n      <li>\n        <a\n          routerLink=\"/auth/settings\"\n          data-test=\"avatar-link-settings\"\n          (click)=\"clickSettings$.next({ event: $event })\"\n          >Settings</a\n        >\n      </li>\n      <li>\n        <a\n          (click)=\"clickLogOut$.next({ event: $event })\"\n          data-test=\"avatar-link-log-out\"\n          >Log Out</a\n        >\n      </li>\n    </ng-template>\n  </menu>\n\n  <ng-template #loggedOutMenu>\n    <li>\n      <a\n        routerLink=\"/auth/sign-up\"\n        data-test=\"avatar-link-sign-up\"\n        (click)=\"clickSignUp$.next({ event: $event })\"\n        >Sign Up</a\n      >\n    </li>\n    <li>\n      <a\n        routerLink=\"/auth/log-in\"\n        data-test=\"avatar-link-log-in\"\n        (click)=\"clickLogIn$.next({ event: $event })\"\n        >Log In</a\n      >\n    </li>\n  </ng-template>\n</div>\n"
        },
        {
            "name": "NgbsAuthAvatarWidget",
            "id": "component-NgbsAuthAvatarWidget-708491b544707142556077accbaa06941d597b6844ae99382eef8e61b5cfde3970d2b081cc568c9de4fb553827a25b07d4ae18332b599adb72e7589ca3ed7595",
            "file": "libs/auth/src/lib/components/avatar/avatar.widget.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngbs-auth-avatar-widget",
            "styleUrls": [],
            "styles": [],
            "template": "<ngbs-auth-avatar [props]=\"avatarProps$ | async\" (action$)=\"this.action$.next($event)\"></ngbs-auth-avatar>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "action$",
                    "defaultValue": "new ReplaySubject<NgbsAuthAvatarComponentAction>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "ReplaySubject"
                }
            ],
            "propertiesClass": [
                {
                    "name": "avatarProps$",
                    "defaultValue": "this.authFacade.user$.pipe(\n    map(user => ({user}))\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "logOut",
                    "defaultValue": "this.action$\n    .pipe(ofType(clickLogOut))\n    .subscribe(() => this.authFacade.logOut())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123,
                        144
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Output } from \"@angular/core\";\nimport { clickLogOut, NgbsAuthAvatarComponentAction, NgbsAuthFacade } from \"@ngbs/auth\";\nimport { ofType } from \"@ngrx/effects\";\nimport { map, ReplaySubject } from \"rxjs\";\n\n/*\n*\n* NgbsAuthAvatarWidget\n*\n* Wraps NgbsAvatarComponent. Widges are \"Smart\" components that serve as wrappers around \"dumb\" components\n*/\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'ngbs-auth-avatar-widget',\n  template: '<ngbs-auth-avatar [props]=\"avatarProps$ | async\" (action$)=\"this.action$.next($event)\"></ngbs-auth-avatar>',\n})\nexport class NgbsAuthAvatarWidget {\n  constructor(private readonly authFacade: NgbsAuthFacade) {}\n\n  // actions are allowed to propagate outside of the widget to the app for\n// further handling as needed (ie logging)\n  @Output()\n  public readonly action$ = new ReplaySubject<NgbsAuthAvatarComponentAction>(1)\n\n  public readonly avatarProps$ = this.authFacade.user$.pipe(\n    map(user => ({user}))\n  )\n\n  public readonly logOut = this.action$\n    .pipe(ofType(clickLogOut))\n    .subscribe(() => this.authFacade.logOut())\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authFacade",
                        "type": "NgbsAuthFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "authFacade",
                        "type": "NgbsAuthFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "NgbsAuthGuardView",
            "id": "component-NgbsAuthGuardView-0c0d4a41b44ac8263f126abb39f8313a0d9b4561e865d5c4704ab571525abe4da1a80a394e92ac08f477dc82577b28dfad33583f90eddb344413b71f36e45b6e",
            "file": "libs/auth/src/lib/views/guard/guard.view.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<h3>You must be logged in to use this feature</h3>\n<a routerLink=\"/auth/log-in\" class=\"d-block\">Log In</a>\n<a routerLink=\"/auth/sign-up\" class=\"d-block\">Sign Up</a>\n<a (click)=\"goBack()\" class=\"d-block\">Back</a>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Location } from '@angular/common'\nimport { ChangeDetectionStrategy, Component } from '@angular/core'\n\n@Component({\n  template: `\n    <h3>You must be logged in to use this feature</h3>\n    <a routerLink=\"/auth/log-in\" class=\"d-block\">Log In</a>\n    <a routerLink=\"/auth/sign-up\" class=\"d-block\">Sign Up</a>\n    <a (click)=\"goBack()\" class=\"d-block\">Back</a>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgbsAuthGuardView {\n  constructor(private readonly location: Location) {}\n\n  public goBack() {\n    this.location.back()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "NgbsAuthLogInFormComponent",
            "id": "component-NgbsAuthLogInFormComponent-e84cc4418637b31ada03f1946cd7e93523266101e9ea9e7acda1335d936c461723a3bf2a635fa218f4d18501bdf427194d2e5a364cd45682c92ef82f35b67afa",
            "file": "libs/auth/src/lib/components/log-in-form/log-in-form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngbs-auth-log-in-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./log-in-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "action$",
                    "defaultValue": "merge(\n    this.formSubmit$.pipe(\n      filter(({ form }) => form.valid),\n      map(formSubmitLogIn)\n    ),\n    this.buttonClickSignUp$.pipe(map(buttonClickSignUp)),\n    this.buttonClickSubmit$.pipe(map(buttonClickSubmit))\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonClickSignUp$",
                    "defaultValue": "new ReplaySubject<{ event: MouseEvent }>(\n    1\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "buttonClickSubmit$",
                    "defaultValue": "new ReplaySubject<{ event: MouseEvent }>(\n    1\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "formSubmit$",
                    "defaultValue": "new ReplaySubject<{\n    event: Event\n    form: LogInForm\n  }>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "logInForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LogInForm",
                    "optional": true,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "logInForm$",
                    "defaultValue": "of(new LogInForm())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "preventNavigation",
                    "defaultValue": "this.formSubmit$.subscribe(({ event }) =>\n    event.preventDefault()\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "setLogInForm",
                    "defaultValue": "this.logInForm$.subscribe(\n    (form) => (this.logInForm = form)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123,
                        144
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>LogInFormComponent</p>\n<p>a basic log in form</p>\n",
            "rawdescription": "\n\nLogInFormComponent\n\na basic log in form\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Output,\n} from '@angular/core'\nimport { merge, of, ReplaySubject } from 'rxjs'\nimport { filter, map } from 'rxjs/operators'\nimport { LogInForm } from './log-in.form'\nimport { createAction, props } from '@ngrx/store'\nimport { ComponentActions } from '@ngbs/utils'\n\n/**\n * LogInFormComponent\n *\n * a basic log in form\n */\n@Component({\n  selector: 'ngbs-auth-log-in-form',\n  templateUrl: './log-in-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgbsAuthLogInFormComponent {\n  public readonly formSubmit$ = new ReplaySubject<{\n    event: Event\n    form: LogInForm\n  }>(1)\n\n  public readonly buttonClickSubmit$ = new ReplaySubject<{ event: MouseEvent }>(\n    1\n  )\n\n  public readonly buttonClickSignUp$ = new ReplaySubject<{ event: MouseEvent }>(\n    1\n  )\n\n  public readonly logInForm$ = of(new LogInForm())\n  public logInForm?: LogInForm\n  public readonly setLogInForm = this.logInForm$.subscribe(\n    (form) => (this.logInForm = form)\n  )\n\n  @Output()\n  public readonly action$ = merge(\n    this.formSubmit$.pipe(\n      filter(({ form }) => form.valid),\n      map(formSubmitLogIn)\n    ),\n    this.buttonClickSignUp$.pipe(map(buttonClickSignUp)),\n    this.buttonClickSubmit$.pipe(map(buttonClickSubmit))\n  )\n\n  public readonly preventNavigation = this.formSubmit$.subscribe(({ event }) =>\n    event.preventDefault()\n  )\n}\n\nexport const formSubmitLogIn = createAction(\n  '[NgbsAuthLogInFormComponent] Log In Form Submit',\n  props<{ event: Event; form: LogInForm }>()\n)\n\nexport const buttonClickSignUp = createAction(\n  '[NgbsAuthLogInFormComponent] Sign Up Button Clicked',\n  props<{ event: MouseEvent }>()\n)\n\nexport const buttonClickSubmit = createAction(\n  '[NgbsAuthLogInFormComponent] Submit Button Clicked',\n  props<{ event: MouseEvent }>()\n)\n\nexport type NgbsAuthLogInFormComponentAction =\n  ComponentActions<NgbsAuthLogInFormComponent>\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<form\n  *ngIf=\"logInForm\"\n  [formGroup]=\"logInForm\"\n  (ngSubmit)=\"formSubmit$.next({event: $event, form: logInForm})\"\n  [class.border.border-danger]=\"!logInForm.valid\"\n>\n  <fieldset class=\"bg-light border border-dark p-5\">\n    <div class=\"d-flex justify-content-between mb-3 align-items-end\">\n      <legend class=\"mb-0\">Log In</legend>\n      <a\n        (click)=\"buttonClickSignUp$.next({event:$event})\"\n        class=\"flex-shrink-0\"\n        routerLink=\"/auth/sign-up\"\n        data-test=\"log-in-form-link-sign-up\"\n        >Sign Up\n      </a>\n    </div>\n\n    <div class=\"mb-3\">\n      <label for=\"input-email\" class=\"form-label\">Email address</label>\n      <input\n        type=\"email\"\n        class=\"form-control\"\n        id=\"input-email\"\n        data-test=\"log-in-form-input-email\"\n        aria-describedby=\"emailHelp\"\n        formControlName=\"emailAddress\"\n      />\n    </div>\n\n    <div class=\"mb-3\">\n      <label for=\"input-password\" class=\"form-label\">Password</label>\n      <input\n        type=\"password\"\n        formControlName=\"password\"\n        class=\"form-control\"\n        id=\"input-password\"\n        data-test=\"log-in-form-input-password\"\n      />\n    </div>\n\n    <div class=\"d-flex justify-content-between align-items-center\">\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary me-2\"\n        data-test=\"log-in-form-button-submit\"\n        (click)=\"buttonClickSubmit$.next({event:$event})\"\n        [disabled]=\"!logInForm.valid\"\n      >\n        Log In\n      </button>\n      <a routerLink=\"/auth/forgot-password\">Forgot Password</a>\n    </div>\n\n    <ul [class.d-none]=\"logInForm.valid\" class=\"mb-0 mt-3\">\n      <li\n        class=\"form-text text-danger\"\n        [class.d-none]=\"!logInForm.controls.emailAddress.errors?.required || !logInForm.controls.emailAddress.touched\"\n      >\n        Email Address is required\n      </li>\n\n      <li\n        class=\"form-text text-danger\"\n        [class.d-none]=\"!logInForm.controls.password.errors?.required || !logInForm.controls.password.touched\"\n      >\n        Password is required\n      </li>\n    </ul>\n  </fieldset>\n</form>\n"
        },
        {
            "name": "NgbsAuthLogInView",
            "id": "component-NgbsAuthLogInView-179ad37975aed45037ecf2653d0c608605cd3bc1a4bfbe2e837dd7cce2f17745041dae75b6fb70aab07086685a1e8ba1ec975e9f575c93ff6df6f8afc49a2c11",
            "file": "libs/auth/src/lib/views/log-in/log-in.view.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<ngbs-auth-log-in-form\n  (action$)=\"action$.next($event)\"\n></ngbs-auth-log-in-form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "action$",
                    "defaultValue": "new ReplaySubject<NgbsAuthLogInFormComponentAction>(\n    1\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "dispatchActions",
                    "defaultValue": "this.action$.subscribe((action) => {\n    this.store.dispatch(action)\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "logIn",
                    "defaultValue": "this.action$\n    .pipe(ofType(formSubmitLogIn), takeUntil(this.ngOnDestroy$))\n    .subscribe((action) => {\n      this.authFacade.logIn({\n        emailAddress: action.form.value.emailAddress,\n        password: action.form.value.password,\n      })\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "ngOnDestroy$",
                    "defaultValue": "new ReplaySubject<void>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core'\nimport { ofType } from '@ngrx/effects'\nimport { Store } from '@ngrx/store'\nimport { ReplaySubject, takeUntil } from 'rxjs'\nimport { NgbsAuthFacade } from '../../+state/auth.facade'\nimport {\n  formSubmitLogIn,\n  NgbsAuthLogInFormComponentAction,\n} from '../../components/log-in-form/log-in-form.component'\n\n@Component({\n  template: `\n    <ngbs-auth-log-in-form\n      (action$)=\"action$.next($event)\"\n    ></ngbs-auth-log-in-form>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgbsAuthLogInView implements OnDestroy {\n  private readonly ngOnDestroy$ = new ReplaySubject<void>(1)\n\n  public readonly action$ = new ReplaySubject<NgbsAuthLogInFormComponentAction>(\n    1\n  )\n\n  constructor(\n    private readonly authFacade: NgbsAuthFacade,\n    private readonly store: Store\n  ) {}\n\n  public readonly logIn = this.action$\n    .pipe(ofType(formSubmitLogIn), takeUntil(this.ngOnDestroy$))\n    .subscribe((action) => {\n      this.authFacade.logIn({\n        emailAddress: action.form.value.emailAddress,\n        password: action.form.value.password,\n      })\n    })\n\n  public readonly dispatchActions = this.action$.subscribe((action) => {\n    this.store.dispatch(action)\n  })\n\n  public ngOnDestroy() {\n    this.ngOnDestroy$.next()\n    this.ngOnDestroy$.complete()\n    this.action$.complete()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authFacade",
                        "type": "NgbsAuthFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "authFacade",
                        "type": "NgbsAuthFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ]
        },
        {
            "name": "NgbsAuthSettingsView",
            "id": "component-NgbsAuthSettingsView-3264bfda4da8e1b82a8f1cc859d55b9adda87f8175b8092cb02fe0489ed74f8c1b6aec19f0f218b650c04465f9f8215750fc3fd6f302861cdbab87a478b2e249",
            "file": "libs/auth/src/lib/views/settings/settings.view.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<h1>Settings</h1>\n<section>Change Display Name</section>\n<section>Change Photo</section>\n<section>Change Email</section>\n<section>Change Password</section>\n<section>Delete Account</section>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core'\n\n@Component({\n  template: `\n    <h1>Settings</h1>\n    <section>Change Display Name</section>\n    <section>Change Photo</section>\n    <section>Change Email</section>\n    <section>Change Password</section>\n    <section>Delete Account</section>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgbsAuthSettingsView {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NgbsAuthSignUpFormComponent",
            "id": "component-NgbsAuthSignUpFormComponent-10634ceb04766c9e2531723fc2420748e736ef4d1a66f8475b95fc9bb2d75c13484d7692c6bba9bbc8d39bb6d4ed4f0b92af7c95758002eaa75857556e3f946a",
            "file": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngbs-auth-sign-up-form",
            "styleUrls": [
                "./sign-up-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "action$",
                    "defaultValue": "merge(\n    this.formSubmit$.pipe(\n      filter(({ form }) => form.valid),\n      map(formSubmitSignUp)\n    ),\n    this.buttonClickLogIn$.pipe(map(buttonClickLogIn)),\n    this.buttonClickSubmit$.pipe(map(buttonClickSubmit))\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonClickLogIn$",
                    "defaultValue": "new ReplaySubject<{ event: MouseEvent }>(\n    1\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "buttonClickSubmit$",
                    "defaultValue": "new ReplaySubject<{ event: MouseEvent }>(\n    1\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "formSubmit$",
                    "defaultValue": "new ReplaySubject<{\n    event: Event\n    form: SignUpForm\n  }>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "signUpForm",
                    "defaultValue": "new SignUpForm()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        144
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>NgbsAuthSignUpFormComponent</p>\n<p>a basic sign up form</p>\n",
            "rawdescription": "\n\nNgbsAuthSignUpFormComponent\n\na basic sign up form\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Output } from '@angular/core'\nimport { ComponentActions } from '@ngbs/utils'\nimport { createAction, props } from '@ngrx/store'\nimport { merge, ReplaySubject } from 'rxjs'\nimport { filter, map } from 'rxjs/operators'\n\nimport { SignUpForm } from './sign-up.form'\n\n/**\n * NgbsAuthSignUpFormComponent\n *\n * a basic sign up form\n */\n@Component({\n  selector: 'ngbs-auth-sign-up-form',\n  templateUrl: './sign-up-form.component.html',\n  styleUrls: ['./sign-up-form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgbsAuthSignUpFormComponent {\n  public readonly signUpForm = new SignUpForm()\n\n  public readonly formSubmit$ = new ReplaySubject<{\n    event: Event\n    form: SignUpForm\n  }>(1)\n\n  public readonly buttonClickSubmit$ = new ReplaySubject<{ event: MouseEvent }>(\n    1\n  )\n\n  public readonly buttonClickLogIn$ = new ReplaySubject<{ event: MouseEvent }>(\n    1\n  )\n\n  @Output()\n  public readonly action$ = merge(\n    this.formSubmit$.pipe(\n      filter(({ form }) => form.valid),\n      map(formSubmitSignUp)\n    ),\n    this.buttonClickLogIn$.pipe(map(buttonClickLogIn)),\n    this.buttonClickSubmit$.pipe(map(buttonClickSubmit))\n  )\n\n  // public readonly preventNavigation = this.formSubmit$.subscribe(({ event }) =>\n  //   event.preventDefault()\n  // )\n}\n\n/*\n * Components should define their own actions for all user interactions, even\n * if the actions won't be directly used by reducers or effects.\n *\n * Component actions bubble up to their parent components just as regular DOM\n * events do, and can be handled accordingly.\n *\n * Component actions can be mapped to module actions in a facade or parent\n * component\n *\n * The goal is to define actions with the greatest degree of granularity for\n * debugging, logging, analytics, etc\n */\n\nexport const formSubmitSignUp = createAction(\n  '[NgbsAuthSignUpFormComponent] Sign Up Form Submit',\n  props<{ event: Event; form: SignUpForm }>()\n)\n\nexport const buttonClickLogIn = createAction(\n  '[NgbsAuthSignUpFormComponent] Log In Button Clicked',\n  props<{ event: MouseEvent }>()\n)\n\nexport const buttonClickSubmit = createAction(\n  '[NgbsAuthSignUpFormComponent] Submit Button Clicked',\n  props<{ event: MouseEvent }>()\n)\n\nexport type NgbsAuthSignUpFormComponentAction =\n  ComponentActions<NgbsAuthSignUpFormComponent>\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sign-up-form.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<form\n  [formGroup]=\"signUpForm\"\n  (ngSubmit)=\"formSubmit$.next({event: $event, form: signUpForm})\"\n>\n  <fieldset class=\"bg-light border border-dark p-5\">\n    <div class=\"d-flex justify-content-between mb-3 align-items-end\">\n      <legend class=\"mb-0\">Sign Up</legend>\n      <a\n        (click)=\"buttonClickLogIn$.next({event:$event})\"\n        class=\"flex-shrink-0\"\n        routerLink=\"/auth/log-in\"\n      >\n        Log In\n      </a>\n    </div>\n\n    <div class=\"mb-3\">\n      <label for=\"input-email\" class=\"form-label\">Email address</label>\n      <input\n        type=\"email\"\n        class=\"form-control\"\n        id=\"input-email\"\n        data-test=\"sign-up-input-email\"\n        aria-describedby=\"emailHelp\"\n        formControlName=\"emailAddress\"\n      />\n      <div id=\"emailHelp\" class=\"form-text\">\n        We'll never share your email with anyone else.\n      </div>\n    </div>\n    <div class=\"mb-3\">\n      <label for=\"input-password\" class=\"form-label\">Password</label>\n      <input\n        type=\"password\"\n        formControlName=\"password\"\n        class=\"form-control\"\n        id=\"input-password\"\n        data-test=\"sign-up-input-password\"\n      />\n    </div>\n    <div class=\"mb-3\">\n      <label for=\"input-password-confirm\" class=\"form-label\"\n        >Confirm Password</label\n      >\n      <input\n        type=\"password\"\n        formControlName=\"passwordConfirm\"\n        class=\"form-control\"\n        id=\"input-password-confirm\"\n        data-test=\"sign-up-input-password-confirm\"\n      />\n    </div>\n    <button\n      type=\"submit\"\n      class=\"btn btn-primary me-2\"\n      (click)=\"buttonClickSubmit$.next({event:$event})\"\n      data-test=\"sign-up-button-submit\"\n      [disabled]=\"!signUpForm.valid\"\n    >\n      Sign Up\n    </button>\n    \n  </fieldset>\n</form>\n"
        },
        {
            "name": "NgbsAuthSignUpView",
            "id": "component-NgbsAuthSignUpView-8f270417acdaa6e440a4b288ddf7235cc3e12716c425133cc26c830523c7c35d689941533ec277377496a6cc8724980601d17576bd4083288bd2b0f438f057fe",
            "file": "libs/auth/src/lib/views/sign-up/sign-up.view.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<ngbs-auth-sign-up-form\n  (action$)=\"action$.next($event)\"\n></ngbs-auth-sign-up-form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "action$",
                    "defaultValue": "new ReplaySubject<NgbsAuthSignUpFormComponentAction>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "dispatchActions",
                    "defaultValue": "this.action$.subscribe((action) => {\n    this.store.dispatch(action)\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "ngOnDestroy$",
                    "defaultValue": "new ReplaySubject<void>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "signUp",
                    "defaultValue": "this.action$\n    .pipe(ofType(formSubmitSignUp), takeUntil(this.ngOnDestroy$))\n    .subscribe((action) => {\n      this.authFacade.signUp({\n        emailAddress: action.form.value.emailAddress,\n        password: action.form.value.password,\n      })\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core'\nimport { ofType } from '@ngrx/effects'\nimport { Store } from '@ngrx/store'\nimport { ReplaySubject, takeUntil } from 'rxjs'\nimport { NgbsAuthFacade } from '../../+state/auth.facade'\nimport {\n  formSubmitSignUp,\n  NgbsAuthSignUpFormComponentAction,\n} from '../../components/sign-up-form/sign-up-form.component'\n\n/*\n * NgbsAuthSignUpView\n *\n * The view component maps UI actions to the facade to be\n * handled by module business logic\n */\n@Component({\n  template: `\n    <ngbs-auth-sign-up-form\n      (action$)=\"action$.next($event)\"\n    ></ngbs-auth-sign-up-form>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgbsAuthSignUpView implements OnDestroy {\n  private readonly ngOnDestroy$ = new ReplaySubject<void>(1)\n\n  public readonly action$ = new ReplaySubject<NgbsAuthSignUpFormComponentAction>(1)\n\n  constructor(\n    private readonly authFacade: NgbsAuthFacade,\n    private readonly store: Store\n  ) {}\n\n  private readonly signUp = this.action$\n    .pipe(ofType(formSubmitSignUp), takeUntil(this.ngOnDestroy$))\n    .subscribe((action) => {\n      this.authFacade.signUp({\n        emailAddress: action.form.value.emailAddress,\n        password: action.form.value.password,\n      })\n    })\n\n  /*\n   * UI actions are allowed to propagate freely to the store\n   * so they can be handled by external effects (ie logging,\n   * analytics)\n   */\n  private readonly dispatchActions = this.action$.subscribe((action) => {\n    this.store.dispatch(action)\n  })\n\n  public ngOnDestroy() {\n    this.ngOnDestroy$.next()\n    this.ngOnDestroy$.complete()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authFacade",
                        "type": "NgbsAuthFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "authFacade",
                        "type": "NgbsAuthFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ]
        },
        {
            "name": "NgbsChangeEmailFormComponent",
            "id": "component-NgbsChangeEmailFormComponent-a86dbd4c62f5f4196516b693531d1768abe1c67267f0929bf942220954e69ca59948129a1958fdd32a7cd55a5ca4a398b3c79a0714b7af15faf222d51f34c61c",
            "file": "libs/auth/src/lib/components/change-email-form/change-email-form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngbs-auth-change-email-form",
            "styleUrls": [],
            "styles": [],
            "template": "<form>\n  <p>Change Email</p>\n</form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core'\n\n@Component({\n  selector: 'ngbs-auth-change-email-form',\n  template: `\n    <form>\n      <p>Change Email</p>\n    </form>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgbsChangeEmailFormComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "NgbsAuthModule",
            "id": "module-NgbsAuthModule-859915a68378b5899d5931e34c290000f1e378ab6e47b270c6f1087b4c449112a4bda0039a3d55590442496e683a75442e3fca2af4152d6bfba915ee04d097bb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/auth/src/lib/auth.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { ReactiveFormsModule } from '@angular/forms'\nimport { Route, RouterModule } from '@angular/router'\nimport {\n  AuthGuardModule,\n  canActivate,\n  redirectLoggedInTo,\n  redirectUnauthorizedTo,\n} from '@angular/fire/auth-guard'\n\nimport { AuthView } from './auth.component'\nimport { NgbsAuthSignUpFormComponent } from './components/sign-up-form/sign-up-form.component'\nimport { NgbsAuthLogInFormComponent } from './components/log-in-form/log-in-form.component'\nimport { NgbsAuthLogInView } from './views/log-in/log-in.view'\nimport { NgbsAuthSignUpView } from './views/sign-up/sign-up.view'\nimport { StoreModule } from '@ngrx/store'\nimport { EffectsModule } from '@ngrx/effects'\nimport * as fromAuth from './+state/auth.reducer'\nimport { AuthEffects } from './+state/auth.effects'\nimport { NgbsAvatarModule } from './components/avatar/avatar.module'\nimport { AuthService } from './auth.service'\nimport { NgbsAuthSettingsView } from './views/settings/settings.view'\nimport { NgbsAuthFacade } from './+state/auth.facade'\nimport { NgbsAuthGuardView } from './views/guard/guard.view'\n\nexport const ngbsAuthRoutes: Route[] = [\n  {\n    path: 'auth',\n    component: AuthView,\n    children: [\n      {\n        path: 'guard',\n        pathMatch: 'full',\n        component: NgbsAuthGuardView,\n      },\n\n      {\n        path: 'sign-up',\n        pathMatch: 'full',\n        component: NgbsAuthSignUpView,\n        ...canActivate(() => redirectLoggedInTo(['/auth/settings'])),\n      },\n      {\n        path: 'log-in',\n        pathMatch: 'full',\n        component: NgbsAuthLogInView,\n        ...canActivate(() => redirectLoggedInTo(['/auth/settings'])),\n      },\n      {\n        path: 'settings',\n        pathMatch: 'full',\n        component: NgbsAuthSettingsView,\n        ...canActivate(() => redirectUnauthorizedTo(['/auth/guard'])),\n      },\n      {\n        path: '',\n        pathMatch: 'full',\n        redirectTo: 'log-in',\n      },\n      {\n        path: '**',\n        redirectTo: 'log-in',\n      },\n    ],\n  },\n]\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AuthGuardModule,\n    NgbsAvatarModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(ngbsAuthRoutes),\n    StoreModule.forFeature(fromAuth.AUTH_FEATURE_KEY, fromAuth.reducer),\n    EffectsModule.forFeature([AuthEffects]),\n  ],\n  declarations: [\n    AuthView,\n    NgbsAuthSignUpFormComponent,\n    NgbsAuthLogInFormComponent,\n    NgbsAuthLogInView,\n    NgbsAuthSignUpView,\n    NgbsAuthSettingsView,\n  ],\n  providers: [NgbsAuthFacade, AuthService],\n  exports: [NgbsAvatarModule],\n})\nexport class NgbsAuthModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        },
                        {
                            "name": "NgbsAuthFacade"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthView"
                        },
                        {
                            "name": "NgbsAuthLogInFormComponent"
                        },
                        {
                            "name": "NgbsAuthLogInView"
                        },
                        {
                            "name": "NgbsAuthSettingsView"
                        },
                        {
                            "name": "NgbsAuthSignUpFormComponent"
                        },
                        {
                            "name": "NgbsAuthSignUpView"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NgbsAvatarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgbsAvatarModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgbsAvatarModule",
            "id": "module-NgbsAvatarModule-9abf4e3ded8b1e25343acd35f2b74ea49f91a43d575d3ba898fbdb2e00ae6a80a62521a0343fbbc2df08b585c342423497a4c38ea60dc05250247d4ef3ea018a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/auth/src/lib/components/avatar/avatar.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { RouterModule } from '@angular/router'\nimport { NgbsUncheckOnDocumentClickModule } from '@ngbs/utils'\nimport { NgbsAuthAvatarComponent } from './avatar.component'\nimport { NgbsAuthAvatarWidget } from './avatar.widget'\n\n@NgModule({\n  imports: [CommonModule, RouterModule, NgbsUncheckOnDocumentClickModule],\n  declarations: [NgbsAuthAvatarComponent, NgbsAuthAvatarWidget],\n  exports: [NgbsAuthAvatarComponent, NgbsAuthAvatarWidget],\n})\nexport class NgbsAvatarModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgbsAuthAvatarComponent"
                        },
                        {
                            "name": "NgbsAuthAvatarWidget"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgbsAuthAvatarComponent"
                        },
                        {
                            "name": "NgbsAuthAvatarWidget"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgbsLogInFormModule",
            "id": "module-NgbsLogInFormModule-53202381019b2a8a6e6379434e7334dfea7c1d3f53eac312fe6bddb74d0f2029bd35bb488e4abf5962857d37b942676a1525addb5a4e6f22c9b91288e5c18204",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/auth/src/lib/components/log-in-form/log-in-form.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { NgbsAuthLogInFormComponent } from \"./log-in-form.component\";\n\nexport * from \"./log-in-form.component\";\nexport * from './log-in.form'\n\n@NgModule({\n  declarations: [NgbsAuthLogInFormComponent],\n  exports: [NgbsAuthLogInFormComponent]\n})\nexport class NgbsLogInFormModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgbsAuthLogInFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgbsAuthLogInFormComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "AUTH_FEATURE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'auth'"
            },
            {
                "name": "authReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(AuthActions.init, (state, { user }) => ({\n    ...state,\n    loaded: true,\n    error: null,\n    user,\n  })),\n  on(AuthActions.loadAuthFailure, (state, { error }) => ({\n    ...state,\n    errors: [...state.errors, error],\n  })),\n  on(AuthActions.logInSuccess, (state, { user }) => ({ ...state, user })),\n  on(AuthActions.logInFailure, (state, { error }) => ({\n    ...state,\n    errors: [error, ...state.errors],\n  })),\n  on(AuthActions.signUpSuccess, (state, { user }) => ({ ...state, user })),\n  on(AuthActions.signUpFailure, (state, { error }) => ({\n    ...state,\n    errors: [error, ...state.errors],\n  })),\n  on(AuthActions.logOut, (state) => ({ ...state, user: undefined }))\n)"
            },
            {
                "name": "buttonClickLogIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgbsAuthSignUpFormComponent] Log In Button Clicked',\n  props<{ event: MouseEvent }>()\n)"
            },
            {
                "name": "buttonClickSignUp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/components/log-in-form/log-in-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgbsAuthLogInFormComponent] Sign Up Button Clicked',\n  props<{ event: MouseEvent }>()\n)"
            },
            {
                "name": "buttonClickSubmit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgbsAuthSignUpFormComponent] Submit Button Clicked',\n  props<{ event: MouseEvent }>()\n)"
            },
            {
                "name": "buttonClickSubmit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/components/log-in-form/log-in-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgbsAuthLogInFormComponent] Submit Button Clicked',\n  props<{ event: MouseEvent }>()\n)"
            },
            {
                "name": "changePasswordFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgbsAuth] Change Password Failure',\n  props<{ error: NgbsError }>()\n)"
            },
            {
                "name": "changePasswordSubmit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgbsAuth] Change Password Submit',\n  props<{ credentials: NgbsAuthCredentials }>()\n)"
            },
            {
                "name": "changePasswordSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgbsAuth] Change Password Success',\n  props<{ user: NgbsUser }>()\n)"
            },
            {
                "name": "clickLogIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/components/avatar/avatar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  `[NgbsAuthAvatarComponent] Log In Clicked`,\n  props<{ event: Event }>()\n)"
            },
            {
                "name": "clickLogOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/components/avatar/avatar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  `[NgbsAuthAvatarComponent] Log Out Clicked`,\n  props<{ event: Event }>()\n)"
            },
            {
                "name": "clickSettings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/components/avatar/avatar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  `[NgbsAuthAvatarComponent] Settings Clicked`,\n  props<{ event: Event }>()\n)"
            },
            {
                "name": "clickSignUp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/components/avatar/avatar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  `[NgbsAuthAvatarComponent] Sign Up Clicked`,\n  props<{ event: Event }>()\n)"
            },
            {
                "name": "formSubmitLogIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/components/log-in-form/log-in-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgbsAuthLogInFormComponent] Log In Form Submit',\n  props<{ event: Event; form: LogInForm }>()\n)"
            },
            {
                "name": "formSubmitSignUp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgbsAuthSignUpFormComponent] Sign Up Form Submit',\n  props<{ event: Event; form: SignUpForm }>()\n)"
            },
            {
                "name": "getAuthErrors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getAuthState,\n  (state: State) => state.errors\n)"
            },
            {
                "name": "getAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<State>(AUTH_FEATURE_KEY)"
            },
            {
                "name": "getErrors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(getAuthState, (state) => state?.errors)"
            },
            {
                "name": "getUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(getAuthState, (state) => state?.user)"
            },
            {
                "name": "init",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgbsAuth] Init',\n  props<{ user?: NgbsUser | null }>()\n)"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  // set initial required properties\n  loaded: false,\n  errors: [],\n}"
            },
            {
                "name": "isAuthLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getAuthState,\n  (state: State) => state.loaded\n)"
            },
            {
                "name": "isLoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(getUser, (user) => !!user)"
            },
            {
                "name": "isLoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(isLoggedIn, (loggedIn) => !loggedIn)"
            },
            {
                "name": "loadAuthFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgbsAuth] Load Auth Failure',\n  props<{ error: NgbsError }>()\n)"
            },
            {
                "name": "loadAuthSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[NgbsAuth] Load Auth Success')"
            },
            {
                "name": "logInFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgbsAuth] Log In Failure',\n  props<{ error: NgbsError }>()\n)"
            },
            {
                "name": "logInSubmit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgbsAuth] Log In Submit',\n  props<{ credentials: NgbsAuthCredentials }>()\n)"
            },
            {
                "name": "logInSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgbsAuth] Log In Success',\n  props<{ user: NgbsUser }>()\n)"
            },
            {
                "name": "logOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[NgbsAuth] Log Out')"
            },
            {
                "name": "mapResponseToUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/models/user.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => map(getUserFromResponse)"
            },
            {
                "name": "ngbsAuthRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/auth.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route[]",
                "defaultValue": "[\n  {\n    path: 'auth',\n    component: AuthView,\n    children: [\n      {\n        path: 'guard',\n        pathMatch: 'full',\n        component: NgbsAuthGuardView,\n      },\n\n      {\n        path: 'sign-up',\n        pathMatch: 'full',\n        component: NgbsAuthSignUpView,\n        ...canActivate(() => redirectLoggedInTo(['/auth/settings'])),\n      },\n      {\n        path: 'log-in',\n        pathMatch: 'full',\n        component: NgbsAuthLogInView,\n        ...canActivate(() => redirectLoggedInTo(['/auth/settings'])),\n      },\n      {\n        path: 'settings',\n        pathMatch: 'full',\n        component: NgbsAuthSettingsView,\n        ...canActivate(() => redirectUnauthorizedTo(['/auth/guard'])),\n      },\n      {\n        path: '',\n        pathMatch: 'full',\n        redirectTo: 'log-in',\n      },\n      {\n        path: '**',\n        redirectTo: 'log-in',\n      },\n    ],\n  },\n]"
            },
            {
                "name": "passwordsMatchValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/components/sign-up-form/sign-up.form.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValidatorFn",
                "defaultValue": "(control: AbstractControl) => {\n  const password = control.get('password');\n  const passwordConfirm = control.get('passwordConfirm');\n  const controlsTouched = password?.touched && passwordConfirm?.touched;\n  if (!controlsTouched || password?.value === passwordConfirm?.value) {\n    return null;\n  } else {\n    return {\n      passwordMismatch: true,\n    };\n  }\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/components/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/components/log-in-form/log-in-form.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "signUpFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgbsAuth] Sign Up Failure',\n  props<{ error: NgbsError }>()\n)"
            },
            {
                "name": "signUpSubmit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgbsAuth] Sign Up Submit',\n  props<{ credentials: NgbsAuthCredentials }>()\n)"
            },
            {
                "name": "signUpSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/+state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgbsAuth] Sign Up Success',\n  props<{ user: NgbsUser }>()\n)"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/components/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<NgbsAuthAvatarComponent>",
                "defaultValue": "(\n  args: NgbsAuthAvatarComponent\n) => ({\n  template: `\n  <ngbs-auth-avatar [props]=\"props\" (action$)=\"action($event)\"></ngbs-auth-avatar>`,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<NgbsAuthSignUpFormComponent>",
                "defaultValue": "(args: NgbsAuthSignUpFormComponent) => ({\n  template: `\n  <select class=\"form-select\" ngbsSelectStylesheet>\n  </select>\n  <ngbs-sign-up-form (action)=\"action($event)\"></ngbs-sign-up-form>`,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/components/log-in-form/log-in-form.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<NgbsAuthLogInFormComponent>",
                "defaultValue": "(\n  args: NgbsAuthLogInFormComponent\n) => ({\n  template: `<ngbs-auth-log-in-form (action)=\"action($event)\"></ngbs-auth-log-in-form>`,\n  props: args,\n})"
            },
            {
                "name": "testUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/test/user.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "userFactory.build()"
            },
            {
                "name": "userFactory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/test/user.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Factory.Sync.makeFactory<Partial<NgbsUser>>({\n  displayName: Factory.each(\n    () => `${faker.name.firstName()} ${faker.name.lastName()}`\n  ),\n  emailVerified: true,\n  photoURL: 'https://blog.matttelliott.com/assets/cat1.jpeg',\n  isAnonymous: false,\n})"
            }
        ],
        "functions": [
            {
                "name": "getUserFromResponse",
                "file": "libs/auth/src/lib/models/user.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "response",
                        "type": "UserCredential",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "response",
                        "type": "UserCredential",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getUserProperties",
                "file": "libs/auth/src/lib/models/user.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "user",
                        "type": "UserInfo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "user",
                        "type": "UserInfo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "libs/auth/src/lib/+state/auth.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "NgbsAuthAvatarComponentAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ComponentActions<NgbsAuthAvatarComponent>",
                "file": "libs/auth/src/lib/components/avatar/avatar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "NgbsAuthLogInFormComponentAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ComponentActions<NgbsAuthLogInFormComponent>",
                "file": "libs/auth/src/lib/components/log-in-form/log-in-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "NgbsAuthSignUpFormComponentAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ComponentActions<NgbsAuthSignUpFormComponent>",
                "file": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "NgbsEmailAddress",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string",
                "file": "libs/auth/src/lib/+state/auth.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 149
            },
            {
                "name": "NgbsError",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "any",
                "file": "libs/auth/src/lib/+state/auth.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 130
            },
            {
                "name": "NgbsPassword",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string",
                "file": "libs/auth/src/lib/+state/auth.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 149
            },
            {
                "name": "NgbsUser",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "User",
                "file": "libs/auth/src/lib/+state/auth.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "NgbsUser",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ReturnType<>",
                "file": "libs/auth/src/lib/models/user.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "libs/auth/src/lib/+state/auth.reducer.ts": [
                {
                    "name": "AUTH_FEATURE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'auth'"
                },
                {
                    "name": "authReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(AuthActions.init, (state, { user }) => ({\n    ...state,\n    loaded: true,\n    error: null,\n    user,\n  })),\n  on(AuthActions.loadAuthFailure, (state, { error }) => ({\n    ...state,\n    errors: [...state.errors, error],\n  })),\n  on(AuthActions.logInSuccess, (state, { user }) => ({ ...state, user })),\n  on(AuthActions.logInFailure, (state, { error }) => ({\n    ...state,\n    errors: [error, ...state.errors],\n  })),\n  on(AuthActions.signUpSuccess, (state, { user }) => ({ ...state, user })),\n  on(AuthActions.signUpFailure, (state, { error }) => ({\n    ...state,\n    errors: [error, ...state.errors],\n  })),\n  on(AuthActions.logOut, (state) => ({ ...state, user: undefined }))\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  // set initial required properties\n  loaded: false,\n  errors: [],\n}"
                }
            ],
            "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.ts": [
                {
                    "name": "buttonClickLogIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgbsAuthSignUpFormComponent] Log In Button Clicked',\n  props<{ event: MouseEvent }>()\n)"
                },
                {
                    "name": "buttonClickSubmit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgbsAuthSignUpFormComponent] Submit Button Clicked',\n  props<{ event: MouseEvent }>()\n)"
                },
                {
                    "name": "formSubmitSignUp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgbsAuthSignUpFormComponent] Sign Up Form Submit',\n  props<{ event: Event; form: SignUpForm }>()\n)"
                }
            ],
            "libs/auth/src/lib/components/log-in-form/log-in-form.component.ts": [
                {
                    "name": "buttonClickSignUp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/components/log-in-form/log-in-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgbsAuthLogInFormComponent] Sign Up Button Clicked',\n  props<{ event: MouseEvent }>()\n)"
                },
                {
                    "name": "buttonClickSubmit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/components/log-in-form/log-in-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgbsAuthLogInFormComponent] Submit Button Clicked',\n  props<{ event: MouseEvent }>()\n)"
                },
                {
                    "name": "formSubmitLogIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/components/log-in-form/log-in-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgbsAuthLogInFormComponent] Log In Form Submit',\n  props<{ event: Event; form: LogInForm }>()\n)"
                }
            ],
            "libs/auth/src/lib/+state/auth.actions.ts": [
                {
                    "name": "changePasswordFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgbsAuth] Change Password Failure',\n  props<{ error: NgbsError }>()\n)"
                },
                {
                    "name": "changePasswordSubmit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgbsAuth] Change Password Submit',\n  props<{ credentials: NgbsAuthCredentials }>()\n)"
                },
                {
                    "name": "changePasswordSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgbsAuth] Change Password Success',\n  props<{ user: NgbsUser }>()\n)"
                },
                {
                    "name": "init",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgbsAuth] Init',\n  props<{ user?: NgbsUser | null }>()\n)"
                },
                {
                    "name": "loadAuthFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgbsAuth] Load Auth Failure',\n  props<{ error: NgbsError }>()\n)"
                },
                {
                    "name": "loadAuthSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[NgbsAuth] Load Auth Success')"
                },
                {
                    "name": "logInFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgbsAuth] Log In Failure',\n  props<{ error: NgbsError }>()\n)"
                },
                {
                    "name": "logInSubmit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgbsAuth] Log In Submit',\n  props<{ credentials: NgbsAuthCredentials }>()\n)"
                },
                {
                    "name": "logInSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgbsAuth] Log In Success',\n  props<{ user: NgbsUser }>()\n)"
                },
                {
                    "name": "logOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[NgbsAuth] Log Out')"
                },
                {
                    "name": "signUpFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgbsAuth] Sign Up Failure',\n  props<{ error: NgbsError }>()\n)"
                },
                {
                    "name": "signUpSubmit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgbsAuth] Sign Up Submit',\n  props<{ credentials: NgbsAuthCredentials }>()\n)"
                },
                {
                    "name": "signUpSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgbsAuth] Sign Up Success',\n  props<{ user: NgbsUser }>()\n)"
                }
            ],
            "libs/auth/src/lib/components/avatar/avatar.component.ts": [
                {
                    "name": "clickLogIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/components/avatar/avatar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  `[NgbsAuthAvatarComponent] Log In Clicked`,\n  props<{ event: Event }>()\n)"
                },
                {
                    "name": "clickLogOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/components/avatar/avatar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  `[NgbsAuthAvatarComponent] Log Out Clicked`,\n  props<{ event: Event }>()\n)"
                },
                {
                    "name": "clickSettings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/components/avatar/avatar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  `[NgbsAuthAvatarComponent] Settings Clicked`,\n  props<{ event: Event }>()\n)"
                },
                {
                    "name": "clickSignUp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/components/avatar/avatar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  `[NgbsAuthAvatarComponent] Sign Up Clicked`,\n  props<{ event: Event }>()\n)"
                }
            ],
            "libs/auth/src/lib/+state/auth.selectors.ts": [
                {
                    "name": "getAuthErrors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getAuthState,\n  (state: State) => state.errors\n)"
                },
                {
                    "name": "getAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<State>(AUTH_FEATURE_KEY)"
                },
                {
                    "name": "getErrors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(getAuthState, (state) => state?.errors)"
                },
                {
                    "name": "getUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(getAuthState, (state) => state?.user)"
                },
                {
                    "name": "isAuthLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getAuthState,\n  (state: State) => state.loaded\n)"
                },
                {
                    "name": "isLoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(getUser, (user) => !!user)"
                },
                {
                    "name": "isLoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/+state/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(isLoggedIn, (loggedIn) => !loggedIn)"
                }
            ],
            "libs/auth/src/lib/models/user.ts": [
                {
                    "name": "mapResponseToUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/models/user.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => map(getUserFromResponse)"
                }
            ],
            "libs/auth/src/lib/auth.module.ts": [
                {
                    "name": "ngbsAuthRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/auth.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route[]",
                    "defaultValue": "[\n  {\n    path: 'auth',\n    component: AuthView,\n    children: [\n      {\n        path: 'guard',\n        pathMatch: 'full',\n        component: NgbsAuthGuardView,\n      },\n\n      {\n        path: 'sign-up',\n        pathMatch: 'full',\n        component: NgbsAuthSignUpView,\n        ...canActivate(() => redirectLoggedInTo(['/auth/settings'])),\n      },\n      {\n        path: 'log-in',\n        pathMatch: 'full',\n        component: NgbsAuthLogInView,\n        ...canActivate(() => redirectLoggedInTo(['/auth/settings'])),\n      },\n      {\n        path: 'settings',\n        pathMatch: 'full',\n        component: NgbsAuthSettingsView,\n        ...canActivate(() => redirectUnauthorizedTo(['/auth/guard'])),\n      },\n      {\n        path: '',\n        pathMatch: 'full',\n        redirectTo: 'log-in',\n      },\n      {\n        path: '**',\n        redirectTo: 'log-in',\n      },\n    ],\n  },\n]"
                }
            ],
            "libs/auth/src/lib/components/sign-up-form/sign-up.form.ts": [
                {
                    "name": "passwordsMatchValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/components/sign-up-form/sign-up.form.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn",
                    "defaultValue": "(control: AbstractControl) => {\n  const password = control.get('password');\n  const passwordConfirm = control.get('passwordConfirm');\n  const controlsTouched = password?.touched && passwordConfirm?.touched;\n  if (!controlsTouched || password?.value === passwordConfirm?.value) {\n    return null;\n  } else {\n    return {\n      passwordMismatch: true,\n    };\n  }\n}"
                }
            ],
            "libs/auth/src/lib/components/avatar/avatar.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/components/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/components/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<NgbsAuthAvatarComponent>",
                    "defaultValue": "(\n  args: NgbsAuthAvatarComponent\n) => ({\n  template: `\n  <ngbs-auth-avatar [props]=\"props\" (action$)=\"action($event)\"></ngbs-auth-avatar>`,\n  props: args,\n})"
                }
            ],
            "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<NgbsAuthSignUpFormComponent>",
                    "defaultValue": "(args: NgbsAuthSignUpFormComponent) => ({\n  template: `\n  <select class=\"form-select\" ngbsSelectStylesheet>\n  </select>\n  <ngbs-sign-up-form (action)=\"action($event)\"></ngbs-sign-up-form>`,\n  props: args,\n})"
                }
            ],
            "libs/auth/src/lib/components/log-in-form/log-in-form.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/components/log-in-form/log-in-form.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/components/log-in-form/log-in-form.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<NgbsAuthLogInFormComponent>",
                    "defaultValue": "(\n  args: NgbsAuthLogInFormComponent\n) => ({\n  template: `<ngbs-auth-log-in-form (action)=\"action($event)\"></ngbs-auth-log-in-form>`,\n  props: args,\n})"
                }
            ],
            "libs/auth/src/lib/test/user.ts": [
                {
                    "name": "testUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/test/user.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "userFactory.build()"
                },
                {
                    "name": "userFactory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/test/user.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Factory.Sync.makeFactory<Partial<NgbsUser>>({\n  displayName: Factory.each(\n    () => `${faker.name.firstName()} ${faker.name.lastName()}`\n  ),\n  emailVerified: true,\n  photoURL: 'https://blog.matttelliott.com/assets/cat1.jpeg',\n  isAnonymous: false,\n})"
                }
            ]
        },
        "groupedFunctions": {
            "libs/auth/src/lib/models/user.ts": [
                {
                    "name": "getUserFromResponse",
                    "file": "libs/auth/src/lib/models/user.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "response",
                            "type": "UserCredential",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "UserCredential",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserProperties",
                    "file": "libs/auth/src/lib/models/user.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "user",
                            "type": "UserInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "UserInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/auth/src/lib/+state/auth.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "libs/auth/src/lib/+state/auth.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "libs/auth/src/lib/components/avatar/avatar.component.ts": [
                {
                    "name": "NgbsAuthAvatarComponentAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ComponentActions<NgbsAuthAvatarComponent>",
                    "file": "libs/auth/src/lib/components/avatar/avatar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "libs/auth/src/lib/components/log-in-form/log-in-form.component.ts": [
                {
                    "name": "NgbsAuthLogInFormComponentAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ComponentActions<NgbsAuthLogInFormComponent>",
                    "file": "libs/auth/src/lib/components/log-in-form/log-in-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.ts": [
                {
                    "name": "NgbsAuthSignUpFormComponentAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ComponentActions<NgbsAuthSignUpFormComponent>",
                    "file": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "libs/auth/src/lib/+state/auth.models.ts": [
                {
                    "name": "NgbsEmailAddress",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string",
                    "file": "libs/auth/src/lib/+state/auth.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 149
                },
                {
                    "name": "NgbsError",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "any",
                    "file": "libs/auth/src/lib/+state/auth.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 130
                },
                {
                    "name": "NgbsPassword",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string",
                    "file": "libs/auth/src/lib/+state/auth.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 149
                },
                {
                    "name": "NgbsUser",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "User",
                    "file": "libs/auth/src/lib/+state/auth.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "libs/auth/src/lib/models/user.ts": [
                {
                    "name": "NgbsUser",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ReturnType<>",
                    "file": "libs/auth/src/lib/models/user.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "libs/auth/src/lib/+state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "changePasswordFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "changePasswordSubmit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "changePasswordSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "init",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAuthFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAuthSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logInFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logInSubmit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logInSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signUpFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signUpSubmit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signUpSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NgbsAuthFacade",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NgbsAuthCredentials",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthPartialState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AUTH_FEATURE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAuthErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isAuthLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isLoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/+state/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isLoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/auth.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthView",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/auth.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ngbsAuthRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/avatar/avatar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/avatar/avatar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgbsAuthAvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/avatar/avatar.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NgbsAvatarComponentProps",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/avatar/avatar.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clickLogIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/avatar/avatar.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clickLogOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/avatar/avatar.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clickSettings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/avatar/avatar.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clickSignUp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/avatar/avatar.widget.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgbsAuthAvatarWidget",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/change-email-form/change-email-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgbsChangeEmailFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/log-in-form/log-in-form.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/log-in-form/log-in-form.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/log-in-form/log-in-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgbsAuthLogInFormComponent",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/log-in-form/log-in-form.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonClickSignUp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/log-in-form/log-in-form.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonClickSubmit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/log-in-form/log-in-form.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formSubmitLogIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/log-in-form/log-in.form.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInForm",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/log-in-form/log-in.form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LogInFormValues",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgbsAuthSignUpFormComponent",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonClickLogIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonClickSubmit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/sign-up-form/sign-up-form.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formSubmitSignUp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/sign-up-form/sign-up.form.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpForm",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/sign-up-form/sign-up.form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SignUpFormValues",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/components/sign-up-form/sign-up.form.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "passwordsMatchValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/guards/is-logged-in.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "NgbsAuthIsLoggedInGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/guards/is-logged-out.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "NgbsAuthIsLoggedOutGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/models/user.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getUserFromResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/models/user.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getUserProperties",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/models/user.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapResponseToUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/test/user.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/test/user.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/views/guard/guard.view.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgbsAuthGuardView",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/views/log-in/log-in.view.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgbsAuthLogInView",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/views/settings/settings.view.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgbsAuthSettingsView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/views/sign-up/sign-up.view.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgbsAuthSignUpView",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            }
        ]
    }
}